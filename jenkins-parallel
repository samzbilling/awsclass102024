#!groovy

/*
 * Jenkinsfile (Scripted Pipeline)
 * - Extracts pipelines based on folder names inside "concourseci_repo/pipelines/postgres_db_deploys"
 * - Reads "params.yml" inside each pipeline folder to determine job names
 * - Filters based on "Filter" parameter if provided
 * - Runs jobs in parallel
 */

@Library('shared-library') _  // Remove if not using a shared library

properties([
    parameters([
        choice(
            name: 'environment',
            choices: ['awsl', 'nw3'],
            description: 'Environment in which to run jobs.'
        ),
        string(
            name: 'Filter',
            defaultValue: '',
            description: 'Filter for pipeline names/jobs (only run matching ones). Leave blank to run all.'
        )
    ])
])

node('fargate-agent') {

    stage('Clone Repos') {
        cleanWs() // Clean workspace before checkout

        dir('concourseci_repo') {
            checkout([
                $class: 'GitSCM',
                branches: [[name: 'master']],
                userRemoteConfigs: [[
                    credentialsId: 'bitbucket-credential',
                    url: 'https://bitbucket.org/covtest/jenkins.concoursejobs.git'
                ]]
            ])
        }

        dir('standalone_jobs_repo') {
            checkout([
                $class: 'GitSCM',
                branches: [[name: 'master']],
                userRemoteConfigs: [[
                    credentialsId: 'bitbucket-credential',
                    url: 'https://bitbucket.org/covtest/jenkins.standalone-jobs.git'
                ]]
            ])
        }
    }

    stage('Identify Jobs to Run') {
        script {
            def pipelineList = getPipelinesAndJobs(params.environment, params.Filter)

            // Run all jobs in parallel
            parallel getParallelDbExecutors(pipelineList)
        }
    }
}

/**
 * Helper function to extract pipeline names (folder names) and job names (from params.yml).
 */
def getPipelinesAndJobs(String environment, String filter) {
    def pipelineList = []

    dir('concourseci_repo/pipelines/postgres_db_deploys') {
        def files = findFiles()

        for (f in files) {
            if (f.directory) { // Only process folders
                echo "Running pipeline for ${f.name}"

                dir(f.name) {
                    def configYaml = readYaml(file: 'params.yml') // Read params.yml
                    def pipeline = f.name // Folder name is the pipeline name
                    def job = "deploy_${environment}_${configYaml.PROJECT}_postgres_db"

                    if (filter.isEmpty() || f.name.contains(filter)) {
                        pipelineList.add([pipeline, job])
                        echo "Adding ${pipeline}.${job} to queue."
                    } else {
                        echo "Skipping ${pipeline}.${job} due to filter."
                    }
                }
            }
        }
    }

    return pipelineList
}

/**
 * Function to convert pipelineList into parallel execution map.
 */
def getParallelDbExecutors(List<List<String>> pipelineList) {
    def parallelStages = [:]

    pipelineList.each { tuple ->
        def (pipelineName, jobName) = tuple
        parallelStages["${pipelineName}"] = {
            node('fargate-agent') {
                stage("Run Pipeline: ${pipelineName}") {
                    dir("concourseci_repo/pipelines/postgres_db_deploys/${pipelineName}") {
                        sh """
                            echo "Executing pipeline ${pipelineName} with job ${jobName}"
                            # Run the actual deployment command here
                            # Example:
                            # python deploy.py --job ${jobName}
                        """
                    }
                }
            }
        }
    }

    return parallelStages
}
